library(ggplot2)#Görselleştirme ve grafik oluşturma için kullanılır.
library(stopwords)#Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir.
library(tm)#Metin maddeciliği için kullanılır.
library(stringr)#Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır.
library(quanteda)# Metin maddeciliği ve metin analizi uygulamaları için kullanılan bir paket.
library(wordcloud2)# Kelime bulutları oluşturmak için kullanılır.
library(RColorBrewer)# Grafiklerde renk paletleri oluşturmak için kullanılır.
library(htmltools)#HTML belgelerini oluşturmak ve düzenlemek için kullanılır.
library(qdap)#Metin maddeciliği ve analiz için çeşitli araçlar içerir.
library(corpustools)# Metin maddeciliği uygulamaları için kullanılır.
library(slam)#Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır.
library(tokenizers)# Metin maddeciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır.
library(pander)# R Markdown ve R script dosyalarını zenginleştirmek için kullanılır.
library(DT)#Veri çerçevelerini interaktif olarak göstermek için kullanılır.
library(openxlsx)#Excel dosyalarını okumak ve yazmak için kullanılır.
library(writexl)#Excel dosyalarını yazmak için kullanılır.
library(sentimentr)# Duygu analizi yapmak için kullanılır.
library(pastecs)# Temel istatistik analizlerini gerçekleştirmek için kullanılır.
library(ggthemes)#ggplot2 grafikleri için özel temalar oluşturmak için kullanılır.
library(ggpubr)# ggplot2 ile yayın kalitesinde grafikler oluşturmak için kullanılır.
library(formattable)#Tabloları özelleştirmek ve biçimlendirmek için kullanılır.
library(ggstance)#ggplot2 grafiklerini yatay düzlemde oluşturmak için kullanılır.
library(GGally)#ggplot2 grafiklerini daha hızlı oluşturmak için kullanılır.
library(report)# R Markdown belgelerini oluşturmak ve yönetmek için kullanılır.
library(citation)#R paketleri için atıf bilgilerini otomatik olarak oluşturmak ve yönetmek için kullanılır.
library(hwordcloud)# Metin maddeciliği uygulamalarında kullanılan bir kelime bulutu oluşturma paketi.
library(syuzhet)# Metinlerin içerdiği duygusal özellikleri analiz etmek için kullanılır.
library(emojifont)
library(showtext)
library(gridExtra)
sonuclar <- lapply(veriler, temizle_yorumlar, stopwords = StopWords)
names(sonuclar) <- names(veriler)
print(sonuclar)
sonuclar <- lapply(veriler, temizle_yorumlar, stopwords = StopWords)
names(sonuclar) <- names(veriler)
sonuclar
library(textdata)#Metin madenciliği (text mining) uygulamaları için kullanılır.
library(tuber)#YouTube Data API'ye erişim sağlar.
library(httpuv)#Web uygulamaları ve sunucu tarafı programlama için kullanılan bir HTTP ve WebSocket kütüphanesi.
library(httr)#HTTP istekleri göndermek ve almak için kullanılır.
library(tidytext)#Metin maddeciliği ve veri çerçeveleri arasında geçiş yapmak için kullanılır.
library(dplyr)#Veri çerçeveleri üzerinde veri manipülasyonu için kullanılır.
library(ggplot2)#Görselleştirme ve grafik oluşturma için kullanılır.
library(stopwords)#Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir.
library(tm)#Metin maddeciliği için kullanılır.
library(stringr)#Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır.
library(quanteda)# Metin maddeciliği ve metin analizi uygulamaları için kullanılan bir paket.
library(wordcloud2)# Kelime bulutları oluşturmak için kullanılır.
library(RColorBrewer)# Grafiklerde renk paletleri oluşturmak için kullanılır.
library(htmltools)#HTML belgelerini oluşturmak ve düzenlemek için kullanılır.
library(qdap)#Metin maddeciliği ve analiz için çeşitli araçlar içerir.
library(corpustools)# Metin maddeciliği uygulamaları için kullanılır.
library(slam)#Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır.
library(tokenizers)# Metin maddeciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır.
library(pander)# R Markdown ve R script dosyalarını zenginleştirmek için kullanılır.
library(DT)#Veri çerçevelerini interaktif olarak göstermek için kullanılır.
library(textdata)#Metin madenciliği (text mining) uygulamaları için kullanılır.
library(tuber)#YouTube Data API'ye erişim sağlar.
library(httpuv)#Web uygulamaları ve sunucu tarafı programlama için kullanılan bir HTTP ve WebSocket kütüphanesi.
library(httr)#HTTP istekleri göndermek ve almak için kullanılır.
library(tidytext)#Metin maddeciliği ve veri çerçeveleri arasında geçiş yapmak için kullanılır.
library(dplyr)#Veri çerçeveleri üzerinde veri manipülasyonu için kullanılır.
library(ggplot2)#Görselleştirme ve grafik oluşturma için kullanılır.
library(stopwords)#Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir.
library(tm)#Metin maddeciliği için kullanılır.
library(stringr)#Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır.
library(quanteda)# Metin maddeciliği ve metin analizi uygulamaları için kullanılan bir paket.
library(wordcloud2)# Kelime bulutları oluşturmak için kullanılır.
library(RColorBrewer)# Grafiklerde renk paletleri oluşturmak için kullanılır.
library(htmltools)#HTML belgelerini oluşturmak ve düzenlemek için kullanılır.
library(qdap)#Metin maddeciliği ve analiz için çeşitli araçlar içerir.
library(corpustools)# Metin maddeciliği uygulamaları için kullanılır.
library(slam)#Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır.
library(tokenizers)# Metin maddeciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır.
library(pander)# R Markdown ve R script dosyalarını zenginleştirmek için kullanılır.
library(DT)#Veri çerçevelerini interaktif olarak göstermek için kullanılır.
library(openxlsx)#Excel dosyalarını okumak ve yazmak için kullanılır.
library(writexl)#Excel dosyalarını yazmak için kullanılır.
library(sentimentr)# Duygu analizi yapmak için kullanılır.
library(pastecs)# Temel istatistik analizlerini gerçekleştirmek için kullanılır.
library(ggthemes)#ggplot2 grafikleri için özel temalar oluşturmak için kullanılır.
library(ggpubr)# ggplot2 ile yayın kalitesinde grafikler oluşturmak için kullanılır.
library(formattable)#Tabloları özelleştirmek ve biçimlendirmek için kullanılır.
library(ggstance)#ggplot2 grafiklerini yatay düzlemde oluşturmak için kullanılır.
library(GGally)#ggplot2 grafiklerini daha hızlı oluşturmak için kullanılır.
library(report)# R Markdown belgelerini oluşturmak ve yönetmek için kullanılır.
library(citation)#R paketleri için atıf bilgilerini otomatik olarak oluşturmak ve yönetmek için kullanılır.
library(hwordcloud)# Metin maddeciliği uygulamalarında kullanılan bir kelime bulutu oluşturma paketi.
library(syuzhet)# Metinlerin içerdiği duygusal özellikleri analiz etmek için kullanılır.
library(emojifont)
library(showtext)
library(gridExtra)
library(readxl)
library(knitr)
library(kableExtra)
library(ggimage)
library(tidyr)
library(plotly)
egitim <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\egitim.xlsx")
ask_me_anything <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\ask_me_anything.xlsx")
library(textdata)#Metin madenciliği (text mining) uygulamaları için kullanılır.
library(tuber)#YouTube Data API'ye erişim sağlar.
library(httpuv)#Web uygulamaları ve sunucu tarafı programlama için kullanılan bir HTTP ve WebSocket kütüphanesi.
library(httr)#HTTP istekleri göndermek ve almak için kullanılır.
library(tidytext)#Metin maddeciliği ve veri çerçeveleri arasında geçiş yapmak için kullanılır.
library(dplyr)#Veri çerçeveleri üzerinde veri manipülasyonu için kullanılır.
library(ggplot2)#Görselleştirme ve grafik oluşturma için kullanılır.
library(stopwords)#Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir.
library(tm)#Metin maddeciliği için kullanılır.
library(stringr)#Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır.
library(quanteda)# Metin maddeciliği ve metin analizi uygulamaları için kullanılan bir paket.
library(wordcloud2)# Kelime bulutları oluşturmak için kullanılır.
library(RColorBrewer)# Grafiklerde renk paletleri oluşturmak için kullanılır.
library(htmltools)#HTML belgelerini oluşturmak ve düzenlemek için kullanılır.
library(qdap)#Metin maddeciliği ve analiz için çeşitli araçlar içerir.
library(corpustools)# Metin maddeciliği uygulamaları için kullanılır.
library(slam)#Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır.
library(tokenizers)# Metin maddeciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır.
library(pander)# R Markdown ve R script dosyalarını zenginleştirmek için kullanılır.
library(DT)#Veri çerçevelerini interaktif olarak göstermek için kullanılır.
library(openxlsx)#Excel dosyalarını okumak ve yazmak için kullanılır.
library(writexl)#Excel dosyalarını yazmak için kullanılır.
library(sentimentr)# Duygu analizi yapmak için kullanılır.
library(pastecs)# Temel istatistik analizlerini gerçekleştirmek için kullanılır.
library(ggthemes)#ggplot2 grafikleri için özel temalar oluşturmak için kullanılır.
library(ggpubr)# ggplot2 ile yayın kalitesinde grafikler oluşturmak için kullanılır.
library(formattable)#Tabloları özelleştirmek ve biçimlendirmek için kullanılır.
library(ggstance)#ggplot2 grafiklerini yatay düzlemde oluşturmak için kullanılır.
library(GGally)#ggplot2 grafiklerini daha hızlı oluşturmak için kullanılır.
library(report)# R Markdown belgelerini oluşturmak ve yönetmek için kullanılır.
library(citation)#R paketleri için atıf bilgilerini otomatik olarak oluşturmak ve yönetmek için kullanılır.
library(hwordcloud)# Metin maddeciliği uygulamalarında kullanılan bir kelime bulutu oluşturma paketi.
library(syuzhet)# Metinlerin içerdiği duygusal özellikleri analiz etmek için kullanılır.
library(emojifont)
library(showtext)
library(gridExtra)
library(readxl)
library(knitr)
library(kableExtra)
library(ggimage)
library(tidyr)
library(plotly)
egitim <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\egitim.xlsx")
ask_me_anything <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\ask_me_anything.xlsx")
challenge <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\challenge.xlsx")
kutu_acma <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\kutu_acma.xlsx")
soru_cevap <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\soru_cevap.xlsx")
sosyal_deney <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\sosyal_deney.xlsx")
makyaj <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\makyaj.xlsx")
asmr <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\asmr.xlsx")
mukbang <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\mukbang.xlsx")
egzersiz <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\egzersiz.xlsx")
yemek <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\yemek.xlsx")
moda <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\moda.xlsx")
komplo_teorisi <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\komplo_teorisi.xlsx")
reaction <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\reaction.xlsx")
vlog <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\vlog.xlsx")
roportaj <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\roportaj.xlsx")
oyun <- read.xlsx("C:\\Users\\lenovo\\OneDrive\\Belgeler\\oyun.xlsx")
veriler <- list(
"Egitim Videosu" = egitim,
"Ask Me Anything Videosu" = ask_me_anything,
"Challenge Videosu" = challenge,
"Kutu Acma Videosu" = kutu_acma,
"Soru-Cevap Videosu" = soru_cevap,
"Sosyal Deney Videosu" = sosyal_deney,
"Makyaj Videosu" = makyaj,
"ASMR Videosu" = asmr,
"Mukbang Videosu" = mukbang,
"Egzersiz Videosu" = egzersiz,
"Yemek Videosu" = yemek,
"Moda Videosu" = moda,
"Komplo Teorisi Videosu" = komplo_teorisi,
"Reaction Videosu" = reaction,
"Roportaj Videosu" = roportaj,
"Oyun Videosu" = oyun,
"Vlog Videosu" = vlog
)
StopWords <- readLines("C:\\Users\\lenovo\\OneDrive\\Belgeler\\stopwords.csv")
silinecek_kelimeler <- c("spencer","shane","ryland","literally","heard","justin","спасибо","おめでとう","thích","thương","pharrell","mukbang","мистер","приедешь","видео","views","кыргызстан","brian","jihyo","lalisa","chapterwithlalisa","allrounderlisaday","feliz","dreams","nakikita","tucker","carlson","dolphin","callahan","dream","badboyhalo","dolphins","george","president","interview,","russian","philippines","lisaaa","สุขสันต")
temizle_yorumlar <- function(veriler, stopwords) {
veriler %>%
mutate(X = row_number()) %>%
mutate(emoji = stringi::stri_extract_all_regex(textOriginal, "\\p{So}")) %>%
select(X, textOriginal, emoji) %>%
mutate(word = str_to_lower(textOriginal)) %>%
unnest_tokens(word, textOriginal) %>%
mutate(word = str_replace_all(word, "[[:punct:]]", "")) %>%
mutate(word = str_squish(word)) %>%
mutate(word = str_replace_all(word, "[0-9]", "")) %>%
filter(!word %in% c(stopwords, silinecek_kelimeler)) %>%
filter(str_length(word) > 4) %>%
mutate(word = str_replace_all(word, "ı", "i")) %>%
as_tibble()
}
temizlenmis_veriler <- lapply(veriler, temizle_yorumlar, stopwords = StopWords)
names(temizlenmis_veriler) <- names(veriler)
for (i in seq_along(temizlenmis_veriler)) {
analiz <- temizlenmis_veriler[[i]]
frekans <- analiz %>%
count(word, sort = TRUE) %>%
filter(n > 1)  # Frekansı 1'den büyük olanları filtrele
# En yüksek frekanslı kelimeleri al
top_words <- head(frekans, 10)
# Grafik için tablonun başlığını oluştur
tablo_baslik <- names(temizlenmis_veriler)[i]
# Grafik oluştur
frekans_grafik <- ggplot(top_words, aes(x = reorder(word, -n), y = n, fill = word)) +
geom_bar(stat = "identity") + # fill estetiği burada belirtildi
scale_fill_brewer(palette = "Set3") + # Renk paleti
labs(x = "Kelime", y = "Frekans", title = tablo_baslik, size= 12) +
theme_minimal() +
coord_flip() +
theme(axis.text.y = element_text(size = 12), # Y ekseni metin boyutu
axis.title = element_text(size = 12, face = "bold", vjust = -0.2), # Eksen başlığı metin boyutu ve kalınlığı
axis.text = element_text(size = 12, face = "bold"), # Eksen metin boyutu ve kalınlığı
legend.text = element_text(size = 12, face = "bold")) # Lejant metin boyutu ve kalınlığı
# Grafikleri yazdır
print(frekans_grafik)
}
analyze_sentiment <- function(temizlenmis_veriler) {
# Veriyi NRC duygu sözlüğü ile birleştirme
polarized_data <- temizlenmis_veriler %>%
inner_join(get_sentiments("nrc"), by = "word")
# Duygu toplamlarını hesaplama
duygu_toplamlari <- polarized_data %>%
group_by(sentiment) %>%
summarise(toplam=n()) %>%
mutate(oran=round(toplam/sum(toplam)*100,2)) %>%
arrange(desc(oran)) %>%
rename("duygu"="sentiment")
return(duygu_toplamlari)
}
# Her veri kümesi için duygu analizi yapma ve görselleştirme
for (i in seq_along(temizlenmis_veriler)) {
duygu <- temizlenmis_veriler[[i]]
# Duygu analizi yapma
duygu_analizi <- analyze_sentiment(duygu)
tablo_baslik <- names(temizlenmis_veriler)[i]
# Grafik oluşturma ve çıktıya dönüştürme
print(ggplot(duygu_analizi, aes(x = duygu, y = oran, fill = duygu)) +
geom_col() +
geom_text(aes(label = paste0(oran, "%")), position = position_stack(vjust = 0.5), color = "black", size = 4) +
labs(title = tablo_baslik, x = "Duygu Durumu", y = "Oran") +
scale_fill_manual(values = c("anger" = "#FF5733", "anticipation" = "#C7EA46", "trust" = "#6454E5",
"joy" = "#FFD700", "fear" = "#6A5ACD", "sadness" = "#6495ED",
"surprise" = "#FF69B4", "disgust" = "#8B4513", "positive" = "#32CD32",
"negative" = "#FF0000"),
guide = guide_legend(title = "Duygu Durumu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position = "top") +
theme(axis.text.y = element_text(size = 12), # Y ekseni metin boyutu
axis.title = element_text(size = 12, face = "bold", vjust = -0.2), # Eksen başlığı metin boyutu ve kalınlığı
axis.text = element_text(size = 12, face = "bold"), # Eksen metin boyutu ve kalınlığı
legend.text = element_text(size = 12, face = "bold")) # Lejant metin boyutu ve kalınlığı
)
}
library(ggplot2)
library(dplyr)
# Pozitif duygu oranlarını hesaplayan bir fonksiyon
pozitif_duygular <- function(sentiment_totals) {
positive_ratio <- sentiment_totals %>%
filter(duygu == "positive") %>%
pull(oran)
if(length(positive_ratio) == 0) {
positive_ratio <- 0
}
return(positive_ratio)
}
# Her veri kümesi için pozitif duygu oranlarını hesaplama
positive_ratios <- data.frame(Dosya = character(), Pozitif_Oran = numeric(), stringsAsFactors = FALSE)
for (i in seq_along(temizlenmis_veriler)) {
analiz <- temizlenmis_veriler[[i]]
# Duygu analizi yapma
duygu_analizi <- analyze_sentiment(analiz)
# Pozitif duygu oranını hesaplama
pozitif_oran <- pozitif_duygular(duygu_analizi)
# Dosya adı
dosya_adi <- names(temizlenmis_veriler)[i]
# Veri çerçevesine ekleme
positive_ratios <- rbind(positive_ratios, data.frame(Dosya = dosya_adi, Pozitif_Oran = pozitif_oran))
}
# Pozitif oranlar tablosunu görselleştirme
ggplot(positive_ratios, aes(x = reorder(Dosya, Pozitif_Oran), y = Pozitif_Oran, fill = Pozitif_Oran)) +
geom_col() +
geom_text(aes(label = paste0(Pozitif_Oran, "%")), vjust = -0.5, color = "black", size = 3) +
labs(title = "Pozitif Duygu Oranları", x = "Veriler", y = "Pozitif Oran (%)") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "none")
library(ggplot2)
library(dplyr)
# Negatif duygu oranlarını hesaplayan bir fonksiyon
negatif_duygular <- function(sentiment_totals) {
negative_ratio <- sentiment_totals %>%
filter(duygu == "negative") %>%
pull(oran)
if(length(negative_ratio) == 0) {
negative_ratio <- 0
}
return(negative_ratio)
}
# Her veri kümesi için negatif duygu oranlarını hesaplama
negative_ratios <- data.frame(Dosya = character(), Negatif_Oran = numeric(), stringsAsFactors = FALSE)
for (i in seq_along(temizlenmis_veriler)) {
df <- temizlenmis_veriler[[i]]
# Duygu analizi yapma
duygu_analizi <- analyze_sentiment(df)
# Negatif duygu oranını hesaplama
negatif_oran <- negatif_duygular(duygu_analizi)
# Dosya adı
dosya_adi <- names(temizlenmis_veriler)[i]
# Veri çerçevesine ekleme
negative_ratios <- rbind(negative_ratios, data.frame(Dosya = dosya_adi, Negatif_Oran = negatif_oran))
}
# Negatif oranlar tablosunu görselleştirme
ggplot(negative_ratios, aes(x = reorder(Dosya, Negatif_Oran), y = Negatif_Oran, fill = Negatif_Oran)) +
geom_col() +
geom_text(aes(label = paste0(Negatif_Oran, "%")), vjust = -0.5, color = "black", size = 3) +
labs(title = "Negatif Duygu Oranları", x = "Veriler", y = "Negatif Oran (%)") +
scale_fill_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "none")
library(ggplot2)
library(dplyr)
# Negatif duygu oranlarını hesaplayan bir fonksiyon
negatif_duygular <- function(sentiment_totals) {
negative_ratio <- sentiment_totals %>%
filter(duygu == "negative") %>%
pull(oran)
if(length(negative_ratio) == 0) {
negative_ratio <- 0
}
return(negative_ratio)
}
# Her veri kümesi için negatif duygu oranlarını hesaplama
negative_ratios <- data.frame(Dosya = character(), Negatif_Oran = numeric(), stringsAsFactors = FALSE)
for (i in seq_along(temizlenmis_veriler)) {
df <- temizlenmis_veriler[[i]]
# Duygu analizi yapma
duygu_analizi <- analyze_sentiment(df)
# Negatif duygu oranını hesaplama
negatif_oran <- negatif_duygular(duygu_analizi)
# Dosya adı
dosya_adi <- names(temizlenmis_veriler)[i]
# Veri çerçevesine ekleme
negative_ratios <- rbind(negative_ratios, data.frame(Dosya = dosya_adi, Negatif_Oran = negatif_oran))
}
# Negatif oranlar tablosunu görselleştirme
ggplot(negative_ratios, aes(x = reorder(Dosya, Negatif_Oran), y = Negatif_Oran, fill = Negatif_Oran)) +
geom_col() +
geom_text(aes(label = paste0(Negatif_Oran, "%")), vjust = -0.5, color = "black", size = 3) +
labs(title = "Negatif Duygu Oranları", x = "Veriler", y = "Negatif Oran (%)") +
scale_fill_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "none")
analyze_emoji <- function(dataset) {
emoji_tablosu <- table(unlist(dataset$emoji))
emojiler <- data.frame(
Emoji = names(emoji_tablosu),
Tekrar_Sayisi = as.numeric(emoji_tablosu)
) %>%
arrange(desc(Tekrar_Sayisi)) %>%
slice_head(n = 30)
return(emojiler)
}
for (i in seq_along(temizlenmis_veriler)) {
dataset <- temizlenmis_veriler[[i]]
# Emoji Analizi Yapma
emojiler <- analyze_emoji(dataset)
# Wordcloud Oluşturma
emoji_wordcloud <- wordcloud2(emojiler, color = "white",backgroundColor = "black", size = 1.5)
}
print(emoji_wordcloud)
# Create a bar plot of the top 30 emojis
p <- ggplot(data = emojiler, aes(x = reorder(Emoji, -Tekrar_Sayisi), y = Tekrar_Sayisi, fill = Tekrar_Sayisi)) +
geom_bar(stat = "identity") +
labs(title = "Top 30 Emojis", x = "Emoji", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly for interactivity
ggplotly(p)
View(emojiler)
# Directory to save the plots
output_dir <- "emoji_plots"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Assuming 'temizlenmis_veriler' is a list of datasets containing an 'emoji' column
# Loop through each dataset in 'temizlenmis_veriler'
for (i in seq_along(temizlenmis_veriler)) {
dataset <- temizlenmis_veriler[[i]]
# Analyze emojis in the current dataset
emojiler <- analyze_emoji(dataset)
# Create a bar plot of the top 30 emojis
p <- ggplot(data = emojiler, aes(x = reorder(Emoji, -Tekrar_Sayisi), y = Tekrar_Sayisi, fill = Tekrar_Sayisi)) +
geom_bar(stat = "identity") +
labs(title = paste("Top 30 Emojis in Dataset", i), x = "Emoji", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly for interactivity
plotly_plot <- ggplotly(p)
# Define the file name for the plot
output_file <- file.path(output_dir, paste0("emoji_plot_", i, ".html"))
# Save the plot as an HTML file
saveWidget(plotly_plot, output_file, selfcontained = TRUE)
}
print("All plots have been saved successfully.")
<a href="Youtube-Icerik-Analizi-Kodları.html">
library(tinytex)
library(textdata) # Metin madenciliği (text mining) uygulamaları için veri setleri sağlar.
library(tuber) # YouTube Data API'ye erişim sağlar, YouTube verilerini çekmek ve analiz etmek için kullanılır.
library(httpuv) # Web uygulamaları ve sunucu tarafı programlama için kullanılan bir HTTP ve WebSocket kütüphanesi. Shiny uygulamaları gibi etkileşimli web uygulamaları için gereklidir.
library(httr) # HTTP istekleri göndermek ve almak için kullanılır. API'larla etkileşim kurmak için faydalıdır.
library(tidytext) # Metin madenciliği ve veri çerçeveleri arasında geçiş yapmak için kullanılır, metin verilerini analiz etmeye yardımcı olur.
library(dplyr) # Veri çerçeveleri üzerinde veri manipülasyonu için kullanılır, veriyi filtrelemek, düzenlemek ve özetlemek için işlevler sağlar.
library(ggplot2) # Görselleştirme ve grafik oluşturma için kullanılır, estetik ve özelleştirilebilir grafikler yapmayı sağlar.
library(stopwords) # Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir, metin madenciliğinde anlamsız kelimeleri çıkarmak için kullanılır.
library(tm) # Metin madenciliği için kullanılır, metin verilerini işlemek ve analiz etmek için araçlar sağlar.
library(stringr) # Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır, dize manipülasyonu için fonksiyonlar içerir.
library(quanteda) # Metin madenciliği ve metin analizi uygulamaları için kullanılan bir paket, büyük metin koleksiyonlarını analiz etmek için kullanılır.
library(wordcloud2) # Kelime bulutları oluşturmak için kullanılır, görsel olarak kelime frekanslarını gösterir.
library(RColorBrewer) # Grafiklerde renk paletleri oluşturmak için kullanılır, ggplot2 ile renk paletlerini entegre eder.
library(htmltools) # HTML belgelerini oluşturmak ve düzenlemek için kullanılır, Shiny uygulamaları ve R Markdown belgeleri ile birlikte kullanılır.
library(qdap) # Metin madenciliği ve analiz için çeşitli araçlar içerir, metin verilerini temizlemek ve analiz etmek için fonksiyonlar sunar.
library(corpustools) # Metin madenciliği uygulamaları için kullanılır, büyük metin koleksiyonlarını analiz etmek için araçlar sağlar.
library(slam) # Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır, sparse matris işlemlerini kolaylaştırır.
library(tokenizers) # Metin madenciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır, metin verilerini parçalara ayırır.
library(pander) # R Markdown ve R script dosyalarını zenginleştirmek için kullanılır, sonuçları biçimlendirmek ve sunmak için fonksiyonlar içerir.
library(DT) # Veri çerçevelerini interaktif olarak göstermek için kullanılır, dinamik ve etkileşimli tablolar oluşturur.
library(openxlsx) # Excel dosyalarını okumak ve yazmak için kullanılır, Excel dosyalarıyla çalışmayı kolaylaştırır.
library(writexl) # Excel dosyalarını yazmak için kullanılır, basit ve hızlı bir şekilde Excel dosyaları oluşturur.
library(sentimentr) # Duygu analizi yapmak için kullanılır, metin verilerindeki duygusal tonları analiz eder.
library(pastecs) # Temel istatistik analizlerini gerçekleştirmek için kullanılır, tanımlayıcı istatistikler sağlar.
library(ggthemes) # ggplot2 grafikleri için özel temalar oluşturmak için kullanılır, grafiklerin stilini özelleştirmeyi sağlar.
library(ggpubr) # ggplot2 ile yayın kalitesinde grafikler oluşturmak için kullanılır, grafikleri birleştirme ve düzenleme fonksiyonları içerir.
library(formattable) # Tabloları özelleştirmek ve biçimlendirmek için kullanılır, sonuçların görsel olarak sunumunu iyileştirir.
library(ggstance) # ggplot2 grafiklerini yatay düzlemde oluşturmak için kullanılır, yatay grafikler çizmeyi sağlar.
library(GGally) # ggplot2 grafiklerini daha hızlı oluşturmak için kullanılır, grafik kombinasyonları ve matris grafikleri oluşturur.
library(report) # R Markdown belgelerini oluşturmak ve yönetmek için kullanılır, analiz sonuçlarını raporlama fonksiyonları içerir.
library(citation) # R paketleri için atıf bilgilerini otomatik olarak oluşturmak ve yönetmek için kullanılır, atıf formatlarını sağlar.
library(hwordcloud) # Metin madenciliği uygulamalarında kullanılan bir kelime bulutu oluşturma paketi, kelime frekanslarını görselleştirir.
library(syuzhet) # Metinlerin içerdiği duygusal özellikleri analiz etmek için kullanılır, duygu analizi için çeşitli yöntemler sağlar.
library(emojifont) # Grafiklerde emoji ve simgeler kullanmak için gerekli fontları sağlar, ggplot2 ile entegre olur.
library(showtext) # Grafiklerde özel fontlar kullanmak için gerekli araçları sağlar, ggplot2 ve diğer grafik araçlarıyla çalışır.
library(gridExtra) # Birden fazla grafik veya tabloyu tek bir grafikte birleştirmek için kullanılır, grid yapısını kullanarak düzenler.
library(readxl) # Excel dosyalarını okumak için kullanılır, çeşitli Excel dosyası formatlarını destekler.
library(knitr) # R Markdown belgelerini oluşturmak ve derlemek için kullanılır, dinamik raporlama sağlar.
library(kableExtra) # Tabloları biçimlendirmek ve zenginleştirmek için kullanılır, knitr ile birlikte kullanılır.
library(ggimage) # ggplot2 grafiklerine görüntü eklemek için kullanılır, görselleri entegre eder.
library(tidyr) # Verileri yeniden şekillendirmek ve düzenlemek için kullanılır, veri temizleme ve manipülasyon araçları sunar.
library(plotly) # Etkileşimli ve dinamik grafikler oluşturmak için kullanılır, ggplot2 ile birlikte çalışabilir ve web tabanlı görselleştirme sağlar.
tinytex::latexmk()
tinytex::latexmk()
library(textdata) # Metin madenciliği (text mining) uygulamaları için veri setleri sağlar.
library(tuber) # YouTube Data API'ye erişim sağlar, YouTube verilerini çekmek ve analiz etmek için kullanılır.
library(httpuv) # Web uygulamaları ve sunucu tarafı programlama için kullanılan bir HTTP ve WebSocket kütüphanesi. Shiny uygulamaları gibi etkileşimli web uygulamaları için gereklidir.
library(httr) # HTTP istekleri göndermek ve almak için kullanılır. API'larla etkileşim kurmak için faydalıdır.
library(tidytext) # Metin madenciliği ve veri çerçeveleri arasında geçiş yapmak için kullanılır, metin verilerini analiz etmeye yardımcı olur.
library(dplyr) # Veri çerçeveleri üzerinde veri manipülasyonu için kullanılır, veriyi filtrelemek, düzenlemek ve özetlemek için işlevler sağlar.
library(ggplot2) # Görselleştirme ve grafik oluşturma için kullanılır, estetik ve özelleştirilebilir grafikler yapmayı sağlar.
library(stopwords) # Dil bağımsız bir şekilde sık kullanılan kelimelerin listesini içerir, metin madenciliğinde anlamsız kelimeleri çıkarmak için kullanılır.
library(tm) # Metin madenciliği için kullanılır, metin verilerini işlemek ve analiz etmek için araçlar sağlar.
library(stringr) # Metin dizileri üzerinde işlemler gerçekleştirmek için kullanılır, dize manipülasyonu için fonksiyonlar içerir.
library(quanteda) # Metin madenciliği ve metin analizi uygulamaları için kullanılan bir paket, büyük metin koleksiyonlarını analiz etmek için kullanılır.
library(wordcloud2) # Kelime bulutları oluşturmak için kullanılır, görsel olarak kelime frekanslarını gösterir.
library(RColorBrewer) # Grafiklerde renk paletleri oluşturmak için kullanılır, ggplot2 ile renk paletlerini entegre eder.
library(htmltools) # HTML belgelerini oluşturmak ve düzenlemek için kullanılır, Shiny uygulamaları ve R Markdown belgeleri ile birlikte kullanılır.
library(qdap) # Metin madenciliği ve analiz için çeşitli araçlar içerir, metin verilerini temizlemek ve analiz etmek için fonksiyonlar sunar.
library(corpustools) # Metin madenciliği uygulamaları için kullanılır, büyük metin koleksiyonlarını analiz etmek için araçlar sağlar.
library(slam) # Büyük ve seyrek matrisler üzerinde çalışmak için kullanılır, sparse matris işlemlerini kolaylaştırır.
library(tokenizers) # Metin madenciliği uygulamaları için belirli dilimleme görevlerini gerçekleştirmek için kullanılır, metin verilerini parçalara ayırır.
library(pander) # R Markdown ve R script dosyalarını zenginleştirmek için kullanılır, sonuçları biçimlendirmek ve sunmak için fonksiyonlar içerir.
library(DT) # Veri çerçevelerini interaktif olarak göstermek için kullanılır, dinamik ve etkileşimli tablolar oluşturur.
library(openxlsx) # Excel dosyalarını okumak ve yazmak için kullanılır, Excel dosyalarıyla çalışmayı kolaylaştırır.
library(writexl) # Excel dosyalarını yazmak için kullanılır, basit ve hızlı bir şekilde Excel dosyaları oluşturur.
library(sentimentr) # Duygu analizi yapmak için kullanılır, metin verilerindeki duygusal tonları analiz eder.
library(pastecs) # Temel istatistik analizlerini gerçekleştirmek için kullanılır, tanımlayıcı istatistikler sağlar.
library(ggthemes) # ggplot2 grafikleri için özel temalar oluşturmak için kullanılır, grafiklerin stilini özelleştirmeyi sağlar.
library(ggpubr) # ggplot2 ile yayın kalitesinde grafikler oluşturmak için kullanılır, grafikleri birleştirme ve düzenleme fonksiyonları içerir.
library(formattable) # Tabloları özelleştirmek ve biçimlendirmek için kullanılır, sonuçların görsel olarak sunumunu iyileştirir.
library(ggstance) # ggplot2 grafiklerini yatay düzlemde oluşturmak için kullanılır, yatay grafikler çizmeyi sağlar.
library(GGally) # ggplot2 grafiklerini daha hızlı oluşturmak için kullanılır, grafik kombinasyonları ve matris grafikleri oluşturur.
library(report) # R Markdown belgelerini oluşturmak ve yönetmek için kullanılır, analiz sonuçlarını raporlama fonksiyonları içerir.
library(citation) # R paketleri için atıf bilgilerini otomatik olarak oluşturmak ve yönetmek için kullanılır, atıf formatlarını sağlar.
library(hwordcloud) # Metin madenciliği uygulamalarında kullanılan bir kelime bulutu oluşturma paketi, kelime frekanslarını görselleştirir.
library(syuzhet) # Metinlerin içerdiği duygusal özellikleri analiz etmek için kullanılır, duygu analizi için çeşitli yöntemler sağlar.
library(emojifont) # Grafiklerde emoji ve simgeler kullanmak için gerekli fontları sağlar, ggplot2 ile entegre olur.
library(showtext) # Grafiklerde özel fontlar kullanmak için gerekli araçları sağlar, ggplot2 ve diğer grafik araçlarıyla çalışır.
library(gridExtra) # Birden fazla grafik veya tabloyu tek bir grafikte birleştirmek için kullanılır, grid yapısını kullanarak düzenler.
library(readxl) # Excel dosyalarını okumak için kullanılır, çeşitli Excel dosyası formatlarını destekler.
library(knitr) # R Markdown belgelerini oluşturmak ve derlemek için kullanılır, dinamik raporlama sağlar.
library(kableExtra) # Tabloları biçimlendirmek ve zenginleştirmek için kullanılır, knitr ile birlikte kullanılır.
library(ggimage) # ggplot2 grafiklerine görüntü eklemek için kullanılır, görselleri entegre eder.
library(tidyr) # Verileri yeniden şekillendirmek ve düzenlemek için kullanılır, veri temizleme ve manipülasyon araçları sunar.
library(plotly) # Etkileşimli ve dinamik grafikler oluşturmak için kullanılır, ggplot2 ile birlikte çalışabilir ve web tabanlı görselleştirme sağlar.
library(tinytex)
tinytex::install_tinytex()
tinytex::install_tinytex()
